<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2016-2024 Open Text.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

         http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>com.github.jobservice</groupId>
        <artifactId>job-service-aggregator</artifactId>
        <version>7.2.0-SNAPSHOT</version>
    </parent>

    <artifactId>worker-jobtracking-container-tests</artifactId>
    <packaging>pom</packaging>

    <properties>
        <datastore.container.id>b591d8c6615c4af99d7915719b01259c</datastore.container.id>
        <test.data>${project.basedir}/test-data</test.data>
        <job.database.host>jobtracking-integrationtests-postgres</job.database.host>
        <job.database.port>5432</job.database.port>
        <job.database.name>jobservice</job.database.name>
        <job.database.username>postgres</job.database.username>
        <job.database.password>root</job.database.password>
        <maven.install.skip>true</maven.install.skip>
        <skipNexusStagingDeployMojo>true</skipNexusStagingDeployMojo>
    </properties>

    <dependencies>
        <dependency>
            <groupId>com.github.jobservice</groupId>
            <artifactId>worker-jobtracking-container</artifactId>
            <type>pom</type>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>com.github.cafapi</groupId>
            <artifactId>caf-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.github.cafapi.codec</groupId>
            <artifactId>codec-json</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.github.cafapi.config</groupId>
            <artifactId>config-file</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.github.cafapi.config</groupId>
            <artifactId>config-system</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.github.cafapi.decoder</groupId>
            <artifactId>decoder-js</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.github.cafapi.util</groupId>
            <artifactId>util-naming</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.github.cafapi.util</groupId>
            <artifactId>util-ref</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.github.jobservice</groupId>
            <artifactId>job-service-testing-worker-shared</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.github.jobservice</groupId>
            <artifactId>job-service-util</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.github.jobservice</groupId>
            <artifactId>worker-jobtracking</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.github.workerframework</groupId>
            <artifactId>worker-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.github.workerframework</groupId>
            <artifactId>worker-configs</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.github.workerframework</groupId>
            <artifactId>worker-queue-rabbit</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.github.workerframework</groupId>
            <artifactId>worker-tracking-report</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.github.workerframework.testing</groupId>
            <artifactId>workerframework-testing-integration</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.github.workerframework.testing</groupId>
            <artifactId>workerframework-testing-util</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>jakarta.validation</groupId>
            <artifactId>jakarta.validation-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.glassfish.expressly</groupId>
            <artifactId>expressly</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.hibernate.validator</groupId>
            <artifactId>hibernate-validator</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.json</groupId>
            <artifactId>json</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.testng</groupId>
            <artifactId>testng</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!--Run integration tests.-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <systemPropertyVariables>
                        <docker.host.address>${docker.host.address}</docker.host.address>
                        <worker.restport>${worker.restport}</worker.restport>
                        <worker.adminport>${worker.adminport}</worker.adminport>
                        <rabbitmq.node.port>${rabbitmq.node.port}</rabbitmq.node.port>
                        <rabbitmq.ctrl.port>${rabbitmq.ctrl.port}</rabbitmq.ctrl.port>
                        <input.folder>${test.data}</input.folder>
                        <expected.folder>${test.data}</expected.folder>
                        <datastore.container.id>${datastore.container.id}</datastore.container.id>
                        <datastore.enabled>true</datastore.enabled>
                        <worker.testing.usehttpdatastore>true</worker.testing.usehttpdatastore>
                        <polyglot.engine.WarnInterpreterOnly>false</polyglot.engine.WarnInterpreterOnly>
                    </systemPropertyVariables>
                    <!-- DEBUGGING -->
                    <!--   <debugForkedProcess>true</debugForkedProcess>-->

                    <environmentVariables>
                        <CAF_APPNAME>caf/worker</CAF_APPNAME>
                        <CAF_CONFIG_DECODER>JavascriptDecoder</CAF_CONFIG_DECODER>
                        <CAF_CONFIG_ENABLE_SUBSTITUTOR>false</CAF_CONFIG_ENABLE_SUBSTITUTOR>
                        <CAF_CONFIG_PATH>${project.basedir}/src/test/config</CAF_CONFIG_PATH>
                        <CAF_WORKER_HTTP_DATASTORE_URL>http://${docker.host.address}:${webdav.apache.port}/webdav</CAF_WORKER_HTTP_DATASTORE_URL>
                        <JOB_SERVICE_DATABASE_APPNAME>Job Tracking Worker</JOB_SERVICE_DATABASE_APPNAME>
                        <JOB_SERVICE_DATABASE_HOST>${docker.host.address}</JOB_SERVICE_DATABASE_HOST>
                        <JOB_SERVICE_DATABASE_PORT>${postgres.db.port}</JOB_SERVICE_DATABASE_PORT>
                        <JOB_SERVICE_DATABASE_NAME>${job.database.name}</JOB_SERVICE_DATABASE_NAME>
                        <JOB_SERVICE_DATABASE_USERNAME>${job.database.username}</JOB_SERVICE_DATABASE_USERNAME>
                        <JOB_SERVICE_DATABASE_PASSWORD>${job.database.password}</JOB_SERVICE_DATABASE_PASSWORD>
                    </environmentVariables>
                </configuration>
            </plugin>

            <!--Compile test sources.-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>test-compile</phase>
                        <goals>
                            <goal>testCompile</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>start</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>start</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>stop</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>stop</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <verbose>true</verbose>
                    <watchInterval>500</watchInterval>
                    <logDate>default</logDate>
                    <autoPull>on</autoPull>
                    <removeVolumes>true</removeVolumes>
                    <images>
                        <image>
                            <alias>webdav</alias>
                            <name>${projectDockerRegistry}/cloudesire/webdav</name>
                            <run>
                                <volumes>
                                    <bind>
                                        <volume>/srv/common/webdav</volume>
                                    </bind>
                                </volumes>
                                <ports>
                                    <port>${webdav.apache.port}:8080</port>
                                </ports>
                                <env>
                                    <APACHE_PORT>8080</APACHE_PORT>
                                </env>
                                <wait>
                                    <log>WebDAV Server startup complete</log>
                                    <http>
                                        <url>http://${docker.host.address}:${webdav.apache.port}</url>
                                    </http>
                                    <time>120000</time>
                                    <shutdown>500</shutdown>
                                </wait>
                                <log>
                                    <enabled>true</enabled>
                                </log>
                            </run>
                        </image>
                        <!-- pull in a normal postgres DB for integration tests -->
                        <image>
                            <alias>${job.database.host}</alias>
                            <name>${projectDockerRegistry}/library/postgres</name>
                            <run>
                                <ports>
                                    <port>${postgres.db.port}:5432</port>
                                </ports>
                                <env>
                                    <POSTGRES_PASSWORD>${job.database.password}</POSTGRES_PASSWORD>
                                    <POSTGRES_USER>${job.database.username}</POSTGRES_USER>
                                    <POSTGRES_DB>${job.database.name}</POSTGRES_DB>
                                </env>
                                <wait>
                                    <log>PostgreSQL init process complete</log>
                                    <time>120000</time>
                                    <shutdown>500</shutdown>
                                </wait>
                                <log>
                                    <enabled>true</enabled>
                                </log>
                            </run>
                        </image>

                        <!--Run RabbitMQ.-->
                        <image>
                            <alias>rabbitmq</alias>
                            <name>${projectDockerRegistry}/library/rabbitmq</name>
                            <run>
                                <ports>
                                    <port>${rabbitmq.ctrl.port}:15672</port>
                                    <port>${rabbitmq.node.port}:5672</port>
                                </ports>
                                <wait>
                                    <log>Server startup complete</log>
                                    <http>
                                        <url>http://${docker.host.address}:${rabbitmq.ctrl.port}</url>
                                    </http>
                                    <time>120000</time>
                                    <shutdown>500</shutdown>
                                </wait>
                                <log>
                                    <enabled>true</enabled>
                                </log>
                            </run>
                        </image>

                        <!--Job Tracking worker image.-->
                        <image>
                            <alias>jobtracking-worker</alias>
                            <name>${dockerJobServiceOrg}worker-jobtracking${dockerProjectVersion}</name>
                            <run>
                                <ports>
                                    <port>${worker.restport}:8080</port>
                                    <port>${worker.adminport}:8081</port>
                                    <!-- DEBUGGING -->
                                    <!-- <port>5005:5005</port>-->
                                </ports>
                                <env>
                                    <CAF_RABBITMQ_BACKOFF_INTERVAL>1</CAF_RABBITMQ_BACKOFF_INTERVAL>
                                    <CAF_RABBITMQ_PROTOCOL>amqp</CAF_RABBITMQ_PROTOCOL>
                                    <CAF_RABBITMQ_HOST>rabbitmq</CAF_RABBITMQ_HOST>
                                    <CAF_RABBITMQ_MAX_ATTEMPTS>20</CAF_RABBITMQ_MAX_ATTEMPTS>
                                    <CAF_RABBITMQ_MAX_BACKOFF_INTERVAL>30</CAF_RABBITMQ_MAX_BACKOFF_INTERVAL>
                                    <CAF_RABBITMQ_PREFETCH_BUFFER>0</CAF_RABBITMQ_PREFETCH_BUFFER>
                                    <CAF_RABBITMQ_QUEUE_TYPE>quorum</CAF_RABBITMQ_QUEUE_TYPE>
                                    <CAF_WORKER_RETRY_LIMIT>1</CAF_WORKER_RETRY_LIMIT>
                                    <CAF_WORKER_MAX_BATCH_TIME>1000</CAF_WORKER_MAX_BATCH_TIME>
                                    <CAF_WORKER_THREADS>1</CAF_WORKER_THREADS>
                                    <JOB_SERVICE_DATABASE_HOST>${job.database.host}</JOB_SERVICE_DATABASE_HOST>
                                    <JOB_SERVICE_DATABASE_PORT>${job.database.port}</JOB_SERVICE_DATABASE_PORT>
                                    <JOB_SERVICE_DATABASE_NAME>${job.database.name}</JOB_SERVICE_DATABASE_NAME>
                                    <JOB_SERVICE_DATABASE_USERNAME>${job.database.username}</JOB_SERVICE_DATABASE_USERNAME>
                                    <JOB_SERVICE_DATABASE_PASSWORD>${job.database.password}</JOB_SERVICE_DATABASE_PASSWORD>
                                    <JOB_SERVICE_DATABASE_APPNAME>Job Tracking Worker</JOB_SERVICE_DATABASE_APPNAME>
                                    <!-- DEBUGGING -->
                                    <!-- <_JAVA_OPTIONS>-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5005</_JAVA_OPTIONS>-->
                                </env>
                                <volumes>
                                    <from>
                                        <image>webdav</image>
                                    </from>
                                </volumes>
                                <links>
                                    <link>rabbitmq</link>
                                    <link>${job.database.host}</link>
                                </links>
                                <log>
                                    <enabled>true</enabled>
                                </log>
                                <wait>
                                    <http>
                                        <url>http://${docker.host.address}:${worker.restport}/health-check?type=READY</url>
                                    </http>
                                    <time>120000</time>
                                    <shutdown>500</shutdown>
                                </wait>
                            </run>
                        </image>
                    </images>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>use-default-fixed-ports</id>
            <properties>
                <worker.restport>8080</worker.restport>
                <worker.adminport>8081</worker.adminport>
                <rabbitmq.node.port>5672</rabbitmq.node.port>
                <rabbitmq.ctrl.port>15672</rabbitmq.ctrl.port>
                <postgres.db.port>5432</postgres.db.port>
                <webdav.apache.port>32775</webdav.apache.port>
            </properties>
        </profile>
        <profile>
            <id>long-running-tests</id>
            <properties>
                <test.data>${project.basedir}/test-data-long</test.data>
            </properties>
        </profile>
    </profiles>

</project>
