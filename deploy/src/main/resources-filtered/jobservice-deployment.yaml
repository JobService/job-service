apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: jobservicedb
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: ${maven.build.timestamp}
      labels:
        io.kompose.service: jobservicedb
    spec:
      containers:
      - name: jobservicedb
        image: postgres:9.6
        imagePullPolicy: Always
        env:
        - name: POSTGRES_PASSWORD
          value: "${JOB_SERVICE_DB_PASSWORD}"
        - name: POSTGRES_USER
          value: "${JOB_SERVICE_DB_USER}"
        volumeMounts:
          - mountPath: /var/lib/postgresql/data
            name: job-service-db
        ports:
        - containerPort: 5432
          hostPort: ${JOB_SERVICE_DB_PORT}
      volumes:
      - name: job-service-db
        persistentVolumeClaim:
          claimName: job-service-db
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: rabbitmq
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: ${maven.build.timestamp}
      labels:
        io.kompose.service: rabbitmq
    spec:
      containers:
      - name: rabbitmq
        image: rabbitmq:3-management
        imagePullPolicy: Always
        resources: {}
        volumeMounts:
        - mountPath: /var/lib/rabbitmq
          name: rabbitmq
        ports:
        - containerPort: 5672
          hostPort: ${CAF_RABBITMQ_PORT}
        - containerPort: 15672
          hostPort: ${CAF_RABBITMQ_MANAGEMENT_PORT}
      volumes:
      - name: rabbitmq
        persistentVolumeClaim:
          claimName: rabbitmq
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: jobservice
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: ${maven.build.timestamp}
      labels:
        io.kompose.service: jobservice
    spec:
      containers:
      - name: jobservice
        image: jobservice/job-service:${project.version}
        imagePullPolicy: Always
        env:
          - name: CAF_DATABASE_URL
            value: "jdbc:postgresql://${JOB_SERVICE_DB_HOSTNAME}:${JOB_SERVICE_DB_PORT}/jobservice"
          - name: CAF_DATABASE_USERNAME
            value: "${JOB_SERVICE_DB_USER}"
          - name: CAF_DATABASE_PASSWORD
            value: "${JOB_SERVICE_DB_PASSWORD}"
          - name: CAF_RABBITMQ_HOST
            value: "${CAF_RABBITMQ_HOST}"
          - name: CAF_RABBITMQ_PORT
            value: "${CAF_RABBITMQ_PORT}"
          - name: CAF_RABBITMQ_USERNAME
            value: "${CAF_RABBITMQ_USERNAME}"
          - name: CAF_RABBITMQ_PASSWORD
            value: "${CAF_RABBITMQ_PASSWORD}"
          - name: CAF_STATUS_CHECK_TIME
            value: "5"
          - name: CAF_TRACKING_PIPE
            value: "jobtracking-in"
          - name: CAF_WEBSERVICE_URL
            value: "http://${JOB_SERVICE_HOST}:${JOB_SERVICE_8080_SERVICE_PORT}/job-service/v1"
        ports:
        - containerPort: 8080
          hostPort: ${JOB_SERVICE_8080_SERVICE_PORT}
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: jobtrackingworker
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: ${maven.build.timestamp}
      labels:
        io.kompose.service: jobtrackingworker
    spec:
      containers:
      - name: worker-jobtracking
        image: jobservice/worker-jobtracking:${project.version}
        imagePullPolicy: Always
        env:
          - name: CAF_RABBITMQ_HOST
            value: "${CAF_RABBITMQ_HOST}"
          - name: CAF_RABBITMQ_PORT
            value: "${CAF_RABBITMQ_PORT}"
          - name: CAF_RABBITMQ_USERNAME
            value: "${CAF_RABBITMQ_USERNAME}"
          - name: CAF_RABBITMQ_PASSWORD
            value: "${CAF_RABBITMQ_PASSWORD}"
          - name: CAF_STATUS_CHECK_TIME
            value: "5"
          - name: CAF_WEBSERVICE_URL
            value: "http://${JOB_SERVICE_HOST}:${JOB_SERVICE_8080_SERVICE_PORT}/job-service/v1"
          - name: CAF_WORKER_ERROR_QUEUE
            value: "jobtracking-err"
          - name: CAF_WORKER_INPUT_QUEUE
            value: "jobtracking-in"
          - name: JOB_DATABASE_URL
            value: "jdbc:postgresql://${JOB_SERVICE_DB_HOSTNAME}:${JOB_SERVICE_DB_PORT}/jobservice"
          - name: JOB_DATABASE_USERNAME
            value: "${JOB_SERVICE_DB_USER}"
          - name: JOB_DATABASE_PASSWORD
            value: "${JOB_SERVICE_DB_PASSWORD}"
        ports:
        - containerPort: 8080
          hostPort: ${JOB_TRACKING_8080_SERVICE_PORT}
        - containerPort: 8081
          hostPort: ${JOB_TRACKING_8081_SERVICE_PORT}
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: jobservicescheduledexecutor
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: ${maven.build.timestamp}
      labels:
        io.kompose.service: jobservicescheduledexecutor
    spec:
      containers:
      - name: jobservicescheduledexecutor
        image: jobservice/job-service-scheduled-executor:${project.version}
        imagePullPolicy: Always
        env:
          - name: CAF_DATABASE_URL
            value: "jdbc:postgresql://${JOB_SERVICE_DB_HOSTNAME}:${JOB_SERVICE_DB_PORT}/jobservice"
          - name: CAF_DATABASE_USERNAME
            value: "${JOB_SERVICE_DB_USER}"
          - name: CAF_DATABASE_PASSWORD
            value: "${JOB_SERVICE_DB_PASSWORD}"
          - name: CAF_RABBITMQ_HOST
            value: "${CAF_RABBITMQ_HOST}"
          - name: CAF_RABBITMQ_PORT
            value: "${CAF_RABBITMQ_PORT}"
          - name: CAF_RABBITMQ_USERNAME
            value: "${CAF_RABBITMQ_USERNAME}"
          - name: CAF_RABBITMQ_PASSWORD
            value: "${CAF_RABBITMQ_PASSWORD}"
          - name: CAF_SCHEDULED_EXECUTOR_PERIOD
            value: "10"
          - name: CAF_STATUS_CHECK_TIME
            value: "5"
          - name: CAF_TRACKING_PIPE
            value: "jobtracking-in"
          - name: CAF_WEBSERVICE_URL
            value: "http://${JOB_SERVICE_HOST}:${JOB_SERVICE_8080_SERVICE_PORT}/job-service/v1"
          - name: CAF_WORKER_INPUT_QUEUE
            value: "jobservicescheduler-in"
        ports:
        - containerPort: 8081
          hostPort: ${JOB_SCHEDULED_EXECUTOR_8081_SERVICE_PORT}
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: worker-globfilter
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: ${maven.build.timestamp}
      labels:
        io.kompose.service: worker-globfilter
    spec:
      containers:
      - name: worker-globfilter
        image: ${worker-globfilter.version}
        imagePullPolicy: Always
        env:
        - name: CAF_BATCH_WORKER_ERROR_QUEUE
          value: "${CAF_BATCH_WORKER_ERROR_QUEUE}"
        - name: CAF_GLOB_WORKER_BINARY_DATA_INPUT_FOLDER
          value: "${CAF_GLOB_WORKER_BINARY_DATA_INPUT_FOLDER}"
        - name: CAF_RABBITMQ_HOST
          value: "${CAF_RABBITMQ_HOST}"
        - name: CAF_RABBITMQ_PORT
          value: "${CAF_RABBITMQ_PORT}"
        - name: CAF_RABBITMQ_PASSWORD
          value: "${CAF_RABBITMQ_PASSWORD}"
        - name: CAF_RABBITMQ_USERNAME
          value: "${CAF_RABBITMQ_USERNAME}"
        - name: CAF_WORKER_INPUT_QUEUE
          value: "${CAF_WORKER_GLOBFILTER_INPUT_QUEUE}"
        volumeMounts:
          - mountPath: /mnt/caf-datastore-root
            name: worker-datastore
          - mountPath: /mnt/caf-worker-input-dir
            name: job-service-demo-input-dir
      volumes:
      - name: worker-datastore
        persistentVolumeClaim:
          claimName: worker-datastore
      - name: job-service-demo-input-dir
        hostPath:
          path: ${JOB_SERVICE_DEMO_INPUT_DIR}
          type: DirectoryOrCreate
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: worker-langdetect
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: ${maven.build.timestamp}
      labels:
        io.kompose.service: worker-langdetect
    spec:
      containers:
      - name: worker-langdetect
        image: ${worker-langdetect.version}
        imagePullPolicy: Always
        env:
        - name: CAF_RABBITMQ_HOST
          value: "${CAF_RABBITMQ_HOST}"
        - name: CAF_RABBITMQ_PORT
          value: "${CAF_RABBITMQ_PORT}"
        - name: CAF_RABBITMQ_PASSWORD
          value: "${CAF_RABBITMQ_PASSWORD}"
        - name: CAF_RABBITMQ_USERNAME
          value: "${CAF_RABBITMQ_USERNAME}"
        - name: CAF_WORKER_INPUT_QUEUE
          value: "${CAF_WORKER_LANGDETECT_INPUT_QUEUE}"
        - name: CAF_WORKER_OUTPUT_QUEUE
          value: "${CAF_WORKER_LANGDETECT_OUTPUT_QUEUE}"
        - name: CAF_LANG_DETECT_WORKER_OUTPUT_FOLDER
          value: "${CAF_LANG_DETECT_WORKER_OUTPUT_FOLDER}"
        volumeMounts:
          - mountPath: /mnt/caf-datastore-root
            name: worker-datastore
          - mountPath: /mnt/caf-worker-output-dir
            name: job-service-demo-output-dir
      volumes:
      - name: worker-datastore
        persistentVolumeClaim:
          claimName: worker-datastore
      - name: job-service-demo-output-dir
        hostPath:
          path: ${JOB_SERVICE_DEMO_OUTPUT_DIR}
          type: DirectoryOrCreate
