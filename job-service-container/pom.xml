<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2015-2018 Micro Focus or one of its affiliates.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

         http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.github.jobservice</groupId>
    <artifactId>job-service-container</artifactId>
    <packaging>pom</packaging>

    <parent>
        <groupId>com.github.jobservice</groupId>
        <artifactId>job-service-aggregator</artifactId>
        <version>2.6.0-SNAPSHOT</version>
    </parent>

    <properties>
        <tomcatBaseImage>cafapi/opensuse-tomcat:3</tomcatBaseImage>
        <webserviceWarName>job-service</webserviceWarName>
        <webserviceBasePath>/v1</webserviceBasePath>
        <swaggerUIWarName>job-service-ui</swaggerUIWarName>
        <db.name>jobservice</db.name>
        <caf.config.impl>config-file</caf.config.impl>
        <caf.codec.impl>codec-json</caf.codec.impl>
        <caf.worker-queue.impl>worker-queue-rabbit</caf.worker-queue.impl>
        <dummyUrl>http://self:1234/job-service/v1</dummyUrl>
    </properties>

    <dependencies>
        <dependency>
            <groupId>com.github.jobservice</groupId>
            <artifactId>job-service</artifactId>
            <version>${project.version}</version>
            <type>war</type>
        </dependency>
        <dependency>
            <groupId>com.github.jobservice</groupId>
            <artifactId>job-service-admin</artifactId>
            <version>${project.version}</version>
            <type>war</type>
        </dependency>
        <!-- Swagger UI -->
        <dependency>
            <groupId>com.github.jobservice</groupId>
            <artifactId>job-service-ui</artifactId>
            <version>${project.version}</version>
            <type>war</type>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-all</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.github.jobservice</groupId>
            <artifactId>job-service-client</artifactId>
            <version>${project.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.github.workerframework</groupId>
            <artifactId>worker-testing-util</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.github.workerframework</groupId>
            <artifactId>worker-testing-integration</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.github.cafapi.codec</groupId>
            <artifactId>${caf.codec.impl}</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.github.cafapi.config</groupId>
            <artifactId>${caf.config.impl}</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.github.workerframework</groupId>
            <artifactId>${caf.worker-queue.impl}</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.github.workerframework</groupId>
            <artifactId>worker-store-fs</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.github.jobservice</groupId>
            <artifactId>job-service-db</artifactId>
            <version>2.6.0-SNAPSHOT</version>
            <classifier>jar-with-dependencies</classifier>
            <scope>runtime</scope>
            <type>jar</type>
        </dependency>
    </dependencies>

    <profiles>
        <profile>
            <id>integration-test</id>
            <activation>
                <property>
                    <name>RE_BUILD_TYPE</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>io.fabric8</groupId>
                        <artifactId>docker-maven-plugin</artifactId>
                        <version>${fabric8.docker.maven.version}</version>
                        <executions>
                            <execution>
                                <id>start</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>build</goal>
                                    <goal>start</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>stop</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>stop</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>use-default-fixed-ports</id>
            <properties>
                <webservice.adminport>25080</webservice.adminport>
                <rabbitmq.node.port>5672</rabbitmq.node.port>
                <rabbitmq.ctrl.port>15672</rabbitmq.ctrl.port>
                <postgres.db.port>5432</postgres.db.port>
                <webservice.healthcheckport>8081</webservice.healthcheckport>
                <!--<CAF_JOBSERVICE_PORT>8080</CAF_JOBSERVICE_PORT>-->
                <!--<db.connection>jdbc:postgresql://${docker.host.address}:${postgres.db.port}</db.connection>-->
            </properties>
        </profile>
    </profiles>

    <build>
        <plugins>
            <!-- Compile test sources. -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven.compiler.version}</version>
                <executions>
                    <execution>
                        <phase>test-compile</phase>
                        <goals>
                            <goal>testCompile</goal>
                        </goals>
                        <configuration>
                            <testCompilerArgument>-parameters</testCompilerArgument>
                            <source>1.8</source>
                            <target>1.8</target>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Process the test resources, test cases. -->
            <!--<plugin>-->
            <!--<groupId>org.apache.maven.plugins</groupId>-->
            <!--<artifactId>maven-resources-plugin</artifactId>-->
            <!--<version>${maven.resources.version}</version>-->
            <!--<executions>-->
            <!--<execution>-->
            <!--<phase>process-test-resources</phase>-->
            <!--<goals>-->
            <!--<goal>testResources</goal>-->
            <!--</goals>-->
            <!--</execution>-->
            <!--</executions>-->
            <!--</plugin>-->

            <!-- Run integration tests. -->
            <plugin>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>${maven.failsafe.version}</version>
                <executions>
                    <execution>
                        <id>webservice-Docker</id>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <systemPropertyVariables>
                        <webservice.adminport>${webservice.adminport}</webservice.adminport>
                        <docker.host.address>${docker.host.address}</docker.host.address>
                        <rabbitmq.node.port>${rabbitmq.node.port}</rabbitmq.node.port>
                        <rabbitmq.ctrl.port>${rabbitmq.ctrl.port}</rabbitmq.ctrl.port>
                    </systemPropertyVariables>
                    <environmentVariables>
                        <CAF_APPNAME>test/jobservice</CAF_APPNAME>
                        <CAF_CONFIG_PATH>${project.basedir}/test-config</CAF_CONFIG_PATH>
                        <CAF_TRACKING_PIPE>tracking-workflow-in</CAF_TRACKING_PIPE>
                        <CAF_STATUS_CHECK_TIME>5</CAF_STATUS_CHECK_TIME>
                        <CAF_INTEGRATIONTESTS_FS_PATH>${caf.integrationtests.fs.path}</CAF_INTEGRATIONTESTS_FS_PATH>
                        <CAF_WEBSERVICE_URL>${dummyUrl}</CAF_WEBSERVICE_URL>
                        <webserviceurl>http://${docker.host.address}:${webservice.adminport}/job-service/v1</webserviceurl>
                        <healthcheckurl>http://${docker.host.address}:${webservice.healthcheckport}/healthcheck</healthcheckurl>
                        <webserviceurlhttps>https://${docker.host.address}:${webservice.https.adminport}/job-service/v1</webserviceurlhttps>
                    </environmentVariables>
                </configuration>
            </plugin>

            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>${fabric8.docker.maven.version}</version>
                <executions>
                    <execution>
                        <id>upload-docker-container</id>
                        <phase>deploy</phase>
                        <goals>
                            <goal>push</goal>
                        </goals>
                        <configuration>
                            <filter>job-service</filter>
                        </configuration>
                    </execution>
                </executions>
                <configuration>
                    <verbose>true</verbose>
                    <logDate>default</logDate>
                    <watchInterval>500</watchInterval>
                    <autoPull>on</autoPull>
                    <images>
                        <image>
                            <alias>webdav</alias>
                            <name>cloudesire/webdav</name>
                            <run>
                                <volumes>
                                    <bind>
                                        <volume>/srv/common/webdav</volume>
                                    </bind>
                                </volumes>
                                <ports>
                                    <port>${webdav.apache.port}:8080</port>
                                </ports>
                                <env>
                                    <APACHE_PORT>8080</APACHE_PORT>
                                </env>
                                <wait>
                                    <log>WebDAV Server startup complete</log>
                                    <http>
                                        <url>http://${docker.host.address}:${webdav.apache.port}</url>
                                    </http>
                                    <time>120000</time>
                                    <shutdown>500</shutdown>
                                </wait>
                                <log>
                                    <enabled>true</enabled>
                                </log>
                            </run>
                        </image>
                        <!-- pull in a normal postgres DB for integration tests -->
                        <image>
                            <alias>jobservice-integrationtests-postgres</alias>
                            <name>postgres:9.4</name>
                            <run>
                                <ports>
                                    <port>${postgres.db.port}:5432</port>
                                </ports>
                                <env>
                                    <POSTGRES_PASSWORD>root</POSTGRES_PASSWORD>
                                    <POSTGRES_USER>postgres</POSTGRES_USER>
                                    <POSTGRES_DB>${db.name}</POSTGRES_DB>
                                </env>
                                <wait>
                                    <log>PostgreSQL init process complete</log>
                                    <time>120000</time>
                                    <shutdown>500</shutdown>
                                </wait>
                                <log>
                                    <enabled>true</enabled>
                                </log>
                            </run>
                        </image>

                        <!--Run rabbitmq for tests. -->
                        <image>
                            <alias>rabbitmq</alias>
                            <name>rabbitmq:3-management</name>
                            <run>
                                <ports>
                                    <port>${rabbitmq.ctrl.port}:15672</port>
                                    <port>${rabbitmq.node.port}:5672</port>
                                </ports>
                                <wait>
                                    <log>Server startup complete</log>
                                    <http>
                                        <url>http://${docker.host.address}:${rabbitmq.ctrl.port}</url>
                                    </http>
                                    <time>120000</time>
                                    <shutdown>500</shutdown>
                                </wait>
                                <log>
                                    <enabled>true</enabled>
                                </log>
                            </run>
                        </image>
                        <!--Build image for config files-->
                        <image>
                            <alias>config</alias>
                            <name>${project.artifactId}-test-config:${project.version}</name>
                            <build>
                                <maintainer>conal.smith@microfocus.com</maintainer>
                                <assembly>
                                    <basedir>/config</basedir>
                                    <inline>
                                        <fileSets>
                                            <fileSet>
                                                <directory>test-config</directory>
                                                <outputDirectory>/</outputDirectory>
                                                <includes>
                                                    <include>*</include>
                                                </includes>
                                            </fileSet>
                                        </fileSets>
                                    </inline>
                                </assembly>
                            </build>
                        </image>
                        <!--Build image for keystore-->
                        <image>
                            <alias>keystore</alias>
                            <name>${project.artifactId}-keystore:${project.version}</name>
                            <build>
                                <from>java:8</from>
                                <maintainer>conal.smith@microfocus.com</maintainer>
                                <runCmds>
                                    <runCmd>mkdir /test-keystore</runCmd>
                                    <runCmd>$JAVA_HOME/bin/keytool -genkey -noprompt -alias tomcat -dname "CN=myname, OU=myorganisational.unit, O=myorganisation, L=mycity, S=myprovince, C=GB" -keystore /test-keystore/tomcat.keystore -storepass changeit -keypass changeit -keyalg RSA</runCmd>
                                </runCmds>
                                <volumes>
                                    <volume>/test-keystore</volume>
                                </volumes>
                            </build>
                        </image>
                        <image>
                            <alias>job-service</alias>
                            <name>${dockerJobServiceOrg}job-service${dockerProjectVersion}</name>
                            <build>
                                <maintainer>conal.smith@microfocus.com</maintainer>
                                <from>${tomcatBaseImage}</from>
                                <labels>
                                    <Build.Number>${project.version}</Build.Number>
                                    <Build.Date>${maven.build.timestamp}</Build.Date>
                                    <Git.Repo>${gitRepo}</Git.Repo>
                                    <Git.Branch>${git.branch}</Git.Branch>
                                    <Git.Commit>${git.revision}</Git.Commit>
                                </labels>
                                <assembly>
                                    <basedir>/</basedir>
                                    <mode>tar</mode>
                                    <inline>
                                        <fileSets>
                                            <fileSet>
                                                <fileMode>0755</fileMode>
                                                <lineEnding>unix</lineEnding>
                                                <directory>src/main/startup.d/</directory>
                                                <outputDirectory>startup/startup.d/</outputDirectory>
                                            </fileSet>
                                        </fileSets>
                                        <dependencySets>
                                            <dependencySet>
                                                <outputDirectory>usr/share/tomcat/webapps/job-service</outputDirectory>
                                                <includes>
                                                    <include>com.github.jobservice:job-service</include>
                                                </includes>
                                                <unpack>true</unpack>
                                                <useProjectArtifact>false</useProjectArtifact>
                                            </dependencySet>
                                            <dependencySet>
                                                <outputDirectory>usr/share/tomcat/webapps/job-service-ui</outputDirectory>
                                                <includes>
                                                    <include>com.github.jobservice:job-service-ui</include>
                                                </includes>
                                                <unpack>true</unpack>
                                                <useProjectArtifact>false</useProjectArtifact>
                                            </dependencySet>
                                            <!-- Including the healthcheck web application. -->
                                            <dependencySet>
                                                <outputDirectory>usr/share/tomcat/adminapps/ROOT</outputDirectory>
                                                <includes>
                                                    <include>com.github.jobservice:job-service-admin</include>
                                                </includes>
                                                <unpack>true</unpack>
                                                <useProjectArtifact>false</useProjectArtifact>
                                            </dependencySet>
                                            <dependencySet>
                                                <useProjectArtifact>false</useProjectArtifact>
                                                <includes>
                                                    <include>com.github.jobservice:job-service-db</include>
                                                </includes>
                                                <outputDirectory>database</outputDirectory>
                                                <outputFileNameMapping>job-service-db-installer.jar</outputFileNameMapping>
                                            </dependencySet>
                                        </dependencySets>
                                    </inline>
                                </assembly>
                            </build>
                            <run>
                                <ports>
                                    <port>${webservice.adminport}:8080</port>
                                    <port>${webservice.https.adminport}:8443</port>
                                    <port>${webservice.healthcheckport}:8081</port>
                                </ports>
                                <env>
                                    <!-- When the container is deployed in Marathon it will use the environment variable values specified in the container json. -->
                                    <CAF_APPNAME>test/jobservice</CAF_APPNAME>
                                    <CAF_CONFIG_PATH>/config</CAF_CONFIG_PATH>
                                    <CAF_DATABASE_URL>jdbc:postgresql://jobservice-integrationtests-postgres:5432/${db.name}</CAF_DATABASE_URL>
                                    <CAF_DATABASE_USERNAME>postgres</CAF_DATABASE_USERNAME>
                                    <CAF_DATABASE_PASSWORD>root</CAF_DATABASE_PASSWORD>
                                    <CAF_TRACKING_PIPE>tracking-workflow-in</CAF_TRACKING_PIPE>
                                    <CAF_STATUS_CHECK_TIME>5</CAF_STATUS_CHECK_TIME>
                                    <CAF_WEBSERVICE_URL>${dummyUrl}</CAF_WEBSERVICE_URL>
                                    <CAF_RABBITMQ_HOST>rabbitmq</CAF_RABBITMQ_HOST>
                                    <CAF_RABBITMQ_PORT>5672</CAF_RABBITMQ_PORT>
                                    <CAF_RABBITMQ_USERNAME>guest</CAF_RABBITMQ_USERNAME>
                                    <CAF_RABBITMQ_PASSWORD>guest</CAF_RABBITMQ_PASSWORD>
                                    <SSL_TOMCAT_CA_CERT_LOCATION>/test-keystore/tomcat.keystore</SSL_TOMCAT_CA_CERT_LOCATION>
                                </env>
                                <volumes>
                                    <from>
                                        <image>keystore</image>
                                        <image>config</image>
                                        <image>webdav</image>
                                    </from>
                                </volumes>
                                <links>
                                    <link>jobservice-integrationtests-postgres</link>
                                    <link>rabbitmq</link>
                                </links>
                                <log>
                                    <enabled>true</enabled>
                                </log>
                                <wait>
                                    <http>
                                        <url>
                                            http://${docker.host.address}:${webservice.adminport}
                                        </url>
                                    </http>
                                    <time>120000</time>
                                    <shutdown>500</shutdown>
                                </wait>
                            </run>
                        </image>
                    </images>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>
